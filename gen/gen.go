package gen

import (
	"bytes"
	"fmt"
	"log"
	"strings"
	"text/template"

	"github.com/phelmkamp/magnum/templates"
)

const (
	topComment   = "// GENERATED BY magnum, DO NOT EDIT\n\n"
	fileTemplate = "package %s\n%s%s"
)

// File represents a generated code file.
type File struct {
	Package string
	Imports Imports
	Funcs   Funcs
}

// NewFile creates a new File with all fields initialized.
func NewFile(pkg string) *File {
	return &File{
		Package: pkg,
		Imports: make(Imports),
		Funcs:   make(Funcs, 0, 10),
	}
}

// String generates the file content.
func (f *File) String() string {
	return topComment + fmt.Sprintf(fileTemplate, f.Package, f.Imports, f.Funcs)
}

// Imports represents a set of import paths.
type Imports map[string]struct{}

// String generates the import statement.
func (is Imports) String() string {
	if len(is) < 1 {
		return ""
	}

	sb := strings.Builder{}
	sb.WriteString("\nimport (\n")
	for k := range is {
		sb.WriteString("\t\"")
		sb.WriteString(k)
		sb.WriteString("\"\n")
	}
	sb.WriteString(")\n")
	return sb.String()
}

// Func represents a generated function.
type Func struct {
	RcvName, RcvType string
	Name             string
	Args             string
	RetVals          string
	Misc             map[string]interface{}
	Tmpl             string
}

// String generates the function code.
func (f Func) String() string {
	return executeTmpl(f.Tmpl, f)
}

// Funcs represents a collection of generated functions.
type Funcs []Func

// String generates the code for all functions.
func (fs Funcs) String() string {
	sb := strings.Builder{}
	for i := range fs {
		sb.WriteString("\n")
		sb.WriteString(fs[i].String())
		sb.WriteString("\n")
	}
	return sb.String()
}

func executeTmpl(tmpl string, data interface{}) string {
	tmplBytes, err := templates.Asset(tmpl + ".tmpl")
	if err != nil {
		log.Fatal(err)
	}

	tmplMessage, err := template.New(tmpl).Parse(string(tmplBytes))
	if err != nil {
		log.Fatal(err)
	}

	var buf bytes.Buffer
	if err := tmplMessage.Execute(&buf, data); err != nil {
		log.Fatal(err)
	}

	return buf.String()
}
