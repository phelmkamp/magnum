package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _getter_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x28\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x05\x89\x06\x25\x97\x85\x54\x16\xa4\xd6\xd6\xaa\x17\x83\xb8\xbe\x99\xc5\xc9\x7a\x6e\x39\x29\x10\xc5\x7a\xbc\x5c\x69\xa5\x79\xc9\x0a\x1a\x10\x85\x50\x13\x90\x75\x69\x22\x4c\xd6\x00\xb3\x83\x52\x4b\xc2\x12\x73\x8a\x41\xca\x78\xb9\x38\x21\x96\x29\x20\x6b\xd7\xc3\xb0\x85\x97\xab\x16\x10\x00\x00\xff\xff\xd7\xe8\xa7\xf6\xa2\x00\x00\x00")

func getter_tmpl() ([]byte, error) {
	return bindata_read(
		_getter_tmpl,
		"getter.tmpl",
	)
}

var _marshal_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xb1\x8a\x83\x40\x18\x04\xe0\xfa\x04\xdf\x61\xca\x5d\x10\x7d\x92\xbb\xe2\x62\x17\x52\x6c\x36\x63\x5c\xd0\xdd\xf0\xfb\x2b\x8a\xec\xbb\x07\x49\x8a\xa4\x98\x62\x18\xe6\x6b\x1a\xfc\x3a\x99\x7a\x37\xb4\x5c\x15\x8c\x3e\xdd\x38\x41\x7b\x42\xe8\x19\x16\x0a\x42\xd4\x04\xe5\xaa\xb3\x1b\xd0\x25\x19\xeb\xb2\xe8\xe6\xe8\x61\xf6\xbd\xfe\xf7\xcb\x9f\x1b\x99\x33\x5e\xa5\xdd\x1e\xcc\xd9\x7e\xaa\xc6\xc2\x1c\x77\x9c\x2f\xd7\x4d\x59\x81\x22\x47\x92\x58\xec\x65\xf1\x23\xd4\x59\xe2\x7b\xfd\x32\xeb\x93\x4a\x88\x77\x63\x6d\x85\x18\x86\xb2\xc8\xcf\x00\x00\x00\xff\xff\xbd\x1f\xee\xac\xb0\x00\x00\x00")

func marshal_tmpl() ([]byte, error) {
	return bindata_read(
		_marshal_tmpl,
		"marshal.tmpl",
	)
}

var _new_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x4b\xc7\x30\x10\x47\xe7\x04\xf2\x1d\x8e\x80\xd0\xc2\x9f\x74\xef\x2a\x8e\x3a\x38\xb8\x87\x7a\x69\x83\x6d\x0a\xb9\xc4\x0e\xc7\x7d\x77\x49\x3a\xa8\xdb\xdd\x83\xdf\xe3\x4d\x13\x30\xbb\x37\x7f\xa0\x08\x64\x2c\x35\x27\x82\xb2\x61\xa3\xef\x58\x3e\xfc\x4e\x22\x10\xce\xdc\xe1\x1a\xbf\x31\x41\xf2\x07\x3a\xa3\x43\x4d\xcb\xef\x78\x68\x14\xa8\xe4\x98\xd6\x11\x86\xbf\xf3\x07\x60\xce\x67\x1e\x81\x8d\x56\x74\xc5\xb2\x6c\xdd\xd1\x7f\x66\xf7\x1a\x69\x71\xcf\x9e\x90\x44\x8c\x56\x9f\x18\x7c\xdd\xcb\x6c\xb4\x52\x77\xd1\xbf\x18\x66\xcb\x62\x9b\x35\x1c\xc5\xbd\x34\x73\x18\x6c\x4d\x5f\xe9\xbc\xee\xb6\x19\x9e\xc8\x3e\xfa\x39\x1a\xad\xc4\x68\xf9\x09\x00\x00\xff\xff\x5e\xb0\x6b\x22\xe7\x00\x00\x00")

func new_tmpl() ([]byte, error) {
	return bindata_read(
		_new_tmpl,
		"new.tmpl",
	)
}

var _unmarshal_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xbd\x6a\x03\x31\x10\x04\xe0\x5a\x02\xbd\xc3\xa4\xbb\x33\xc1\xee\x03\xf7\x0a\x2e\x82\x53\x85\x14\x8a\xbc\x8a\x05\xfa\x09\xab\x3d\xc5\xe6\xd0\xbb\x87\xbb\x10\xb0\xcb\x59\xe6\x5b\xe6\x70\xc0\x5b\x4e\x96\xeb\xc5\xc6\x13\x5d\x05\x67\x72\xe5\x4c\x15\x72\x21\x30\x39\x0a\x8d\x18\x9e\x4b\x42\x90\x0a\xa1\xab\xcc\x36\xc2\x17\x4e\x7b\xa3\xfd\x9c\x1d\x86\x65\xd9\xbf\xba\x76\xb4\x89\x7a\xc7\xee\x2f\x9d\x6e\xdf\xd4\xfb\xf8\xf8\x7c\x58\x39\xde\x3f\x3e\x6f\x42\x23\x88\xb9\x30\x16\xa3\x55\x7b\x5e\x03\x5e\x26\x1c\xe9\xe7\xde\x0f\x55\x38\xe4\xaf\xcd\x8d\xa3\xd1\x2a\xf8\xad\xf9\x34\x21\x87\xb8\x59\xc5\x24\x33\xe7\xf5\x6c\xb4\xea\x46\xab\xdd\xc3\x9e\x09\xcd\xe8\xff\x52\x0e\xd1\xe8\xfe\x1b\x00\x00\xff\xff\x40\x84\x43\xb9\xf4\x00\x00\x00")

func unmarshal_tmpl() ([]byte, error) {
	return bindata_read(
		_unmarshal_tmpl,
		"unmarshal.tmpl",
	)
}

var _value_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x28\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x05\x89\xfa\x66\x16\x27\xeb\x85\x25\xe6\x94\x82\xe4\xaa\xab\xf5\x82\x52\x4b\xc2\x12\x73\x8a\x6b\x6b\xf5\x78\xb9\xd2\x4a\xf3\x92\x11\x3a\x35\x34\x51\xe4\x15\xaa\x79\xb9\x38\x21\x86\xa1\x88\x57\x57\x2b\x55\x2b\xd5\xd6\xf2\x72\x71\x72\xc2\x8c\x77\xcb\x4c\xcd\x49\x29\x06\x8b\x55\x57\x2b\xd5\x82\x65\x6b\x01\x01\x00\x00\xff\xff\x5e\x12\x76\x20\x95\x00\x00\x00")

func value_tmpl() ([]byte, error) {
	return bindata_read(
		_value_tmpl,
		"value.tmpl",
	)
}

var _values_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x28\x4a\x2d\x29\x2d\xca\x2b\x56\x48\xcc\xc9\x51\x28\xc8\x2f\x2e\xce\x4c\xca\x49\x45\x48\xeb\xf1\x72\xa5\x95\xe6\x25\x23\x04\x34\x34\x41\xec\xa0\xd4\x92\xb0\xc4\x9c\xe2\xda\x5a\x85\x6a\x5e\x2e\x4e\x88\x11\x28\xe2\xd5\xd5\x4a\xd5\x4a\x20\x4a\xcf\x37\xb3\x38\x59\x2f\x2c\x31\xa7\x34\x15\x22\x5c\xab\x54\x5b\xcb\xcb\x55\x0b\x08\x00\x00\xff\xff\xc4\xed\x32\xe9\x84\x00\x00\x00")

func values_tmpl() ([]byte, error) {
	return bindata_read(
		_values_tmpl,
		"values.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"getter.tmpl": getter_tmpl,
	"marshal.tmpl": marshal_tmpl,
	"new.tmpl": new_tmpl,
	"unmarshal.tmpl": unmarshal_tmpl,
	"value.tmpl": value_tmpl,
	"values.tmpl": values_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"getter.tmpl": &_bintree_t{getter_tmpl, map[string]*_bintree_t{
	}},
	"marshal.tmpl": &_bintree_t{marshal_tmpl, map[string]*_bintree_t{
	}},
	"new.tmpl": &_bintree_t{new_tmpl, map[string]*_bintree_t{
	}},
	"unmarshal.tmpl": &_bintree_t{unmarshal_tmpl, map[string]*_bintree_t{
	}},
	"value.tmpl": &_bintree_t{value_tmpl, map[string]*_bintree_t{
	}},
	"values.tmpl": &_bintree_t{values_tmpl, map[string]*_bintree_t{
	}},
}}
